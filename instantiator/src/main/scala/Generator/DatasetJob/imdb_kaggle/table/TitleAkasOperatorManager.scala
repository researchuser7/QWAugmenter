package Generator.DatasetJob.imdb_kaggle.table

import Generator.DatasetJob.AbstractTableOperatorManager
import Generator.DatasetJob.utils.getElementBySeed

/**
  * Created by researchuser7 on 2020-06-24.
  */
case class TitleAkasOperatorManager() extends AbstractTableOperatorManager {
  override val tableName: String = "title.akas"
  override val typeSchema: String = "(String, Int, String, String, String, String, String, String)"
  override val fields: Map[String, String] = Map(
    "titleId" -> "1",
    "ordering" -> "2",
    "title" -> "3",
    "region" -> "4",
    "language" -> "5",
    "types" -> "6",
    "attributes" -> "7",
    "isOriginalTitle" -> "8"
  )
  override val joinFieldTable: Map[String, Map[String, String]] = Map("titleId"-> Map("title.principals"-> "titleId", "title.ratings"-> "titleId", "title.basics"-> "titleId"))
  override val filterFieldValue: Map[String, Map[String, Seq[String]]] = Map(
    "region"-> Map("selectivity"-> Seq("1.447464458414889e-06", "4.776632712769133e-05", "9.098348024322158e-06", "8.271225476656508e-07", "5.169515922910318e-08", "8.45732804988128e-05", "2.346960229001284e-05", "1.2406838214984762e-06", "3.8254417829536346e-06", "2.584757961455159e-07", "0.0021557915301720606", "2.067806369164127e-07", "0.0010730881152777238", "0.0028907416089322207", "1.3957692991857858e-06", "2.9207764964443294e-05", "7.666392113676002e-05", "1.8610257322477144e-06", "8.322920635885611e-05", "0.0011470638881345703", "8.891567387405746e-06", "0.001082858500372024", "4.290698216015564e-06", "1.1889886622693731e-06", "2.843233757600675e-06", "1.3957692991857858e-06", "5.169515922910318e-07", "2.2332308786972573e-05", "0.0038287502731442977", "4.652564330619285e-06", "2.3779773245387463e-06", "1.757635413789508e-06", "4.652564330619286e-07", "1.643906063485481e-05", "1.1372935030402698e-06", "0.005002643948918773", "1.757635413789508e-06", "3.6186611460372224e-07", "3.3601853498917065e-06", "0.0003794424687416173", "2.739843439142468e-06", "2.067806369164127e-07", "0.00035545591485931343", "8.581396432031128e-06", "0.0004914141836318548", "0.000221462062137478", "2.2384003946201673e-05", "0.0003582991486169141", "1.1579715667319112e-05", "9.734198482840129e-05", "5.169515922910318e-07", "2.4400115156136698e-05", "0.0006087104999226899", "0.0004427690387972687", "0.12266785689601276", "5.169515922910318e-08", "0.0022973328761413453", "3.6186611460372224e-07", "8.286734024425239e-05", "2.817386177986123e-05", "2.9673021397505223e-05", "0.00025894105257857783", "0.00020595351436874704", "1.5508547768730953e-07", "3.6186611460372224e-07", "0.12207201849073812", "4.549174012161079e-06", "0.003218127052330131", "1.6025499361021983e-06", "1.6542450953313017e-06", "0.12468882745091532", "1.7059402545604048e-06", "0.00980383186232173", "1.5508547768730953e-07", "5.53655155343695e-05", "2.067806369164127e-07", "1.2355143055755658e-05", "2.843233757600675e-06", "1.809330573018611e-06", "4.135612738328254e-07", "1.2406838214984762e-06", "4.4974788529319765e-06", "2.067806369164127e-07", "0.0036114755189043768", "8.839872228176642e-06", "2.5330628022260556e-06", "6.203419107492381e-07", "4.135612738328254e-07", "0.0009055957993754294", "3.980527260640944e-06", "0.00045595130440069", "6.255114266721484e-06", "0.0029143662966999205", "0.00015110495042666857", "0.00041082143039368295", "0.0005038727170060686", "9.822080253529604e-07", "0.11968070381511826", "1.287209464804669e-05", "0.00037225684160877194", "7.563001795217794e-05", "0.12146661648100608", "1.0339031845820635e-07", "1.0028860890446015e-05", "1.1321239871173596e-05", "0.1220819439613101", "1.5922109042563777e-05", "5.479686878284936e-06", "9.408518979696778e-06", "1.0339031845820635e-07", "2.584757961455159e-07", "1.0339031845820635e-07", "1.6852621908687635e-05", "0.0005810018945758906", "7.082236814387135e-06", "9.305128661238572e-07", "2.0471283054724856e-05", "3.1534047129752935e-06", "5.019599961145918e-05", "4.652564330619286e-07", "1.8610257322477144e-06", "3.5928135664226705e-05", "5.686467515201349e-07", "5.686467515201349e-07", "0.0003631584935844498", "2.5175542544573245e-05", "6.859947629701992e-05", "1.2406838214984762e-06", "3.2671340632793205e-05", "4.083917579099151e-06", "5.479686878284936e-06", "3.3084901906626033e-06", "1.3957692991857858e-06", "4.135612738328254e-07", "2.863911821292316e-05", "2.946624076058881e-06", "4.290698216015564e-06", "7.4441029289908575e-06", "3.4635756683499127e-06", "5.169515922910318e-08", "9.822080253529604e-07", "6.203419107492381e-07", "1.0339031845820635e-07", "1.0390727005049739e-05", "2.894928916829778e-06", "1.447464458414889e-06", "8.271225476656508e-07", "0.0023311415102771787", "0.00010292506202514443", "4.4974788529319765e-06", "5.686467515201349e-07", "2.4296724837678494e-06", "0.00021112303029165736", "4.23900305678646e-06", "0.0014396584893712943", "0.0009717139080294524", "2.8380642416777644e-05", "5.169515922910318e-08", "5.169515922910318e-08", "0.0002807047146140302", "7.754273884365476e-07", "2.408994420076208e-05", "0.0002965751284973649", "9.305128661238572e-07", "8.78817706894754e-07", "0.0007773918044872535", "0.00011160984877563376", "0.0024914481990466275", "5.303923336905986e-05", "8.736481909718437e-06", "0.11952494630036097", "5.169515922910318e-08", "1.1579715667319112e-05", "1.0649202801195255e-05", "9.822080253529604e-07", "0.0010330243668751687", "0.0008028775179872014", "0.002782647030984166", "2.998319235287984e-06", "1.1528020508090008e-05", "2.067806369164127e-07", "2.067806369164127e-07", "2.4813676429969525e-06", "0.0023700679651766933", "0.00013306333985571158", "1.0339031845820635e-07", "0.0003581957582984559", "0.00020223146290425161", "1.1889886622693731e-06", "8.167835158198301e-06", "9.92547057198781e-06", "6.203419107492381e-07", "7.754273884365476e-07", "1.0339031845820635e-07", "0.0013284105067102644", "4.187307897557357e-06", "1.431955910646158e-05", "8.78817706894754e-07", "1.0339031845820635e-06", "1.6542450953313017e-06", "0.00011057594559105169", "1.757635413789508e-06", "7.754273884365476e-07", "1.0855983438111667e-06", "2.8897594009068676e-05", "4.652564330619286e-07", "0.001571687926042424", "1.0494117323507944e-05", "2.584757961455159e-07", "0.0002944039318097426", "4.083917579099151e-06", "0.00048092006630834686", "7.4441029289908575e-06", "0.04534725215156545", "0.00029564461563124104", "5.68646751520135e-06", "1.5508547768730953e-07", "3.1017095537461906e-07", "1.5508547768730952e-06", "0.000395829834217243", "5.169515922910318e-08", "5.014430445223008e-06", "0.00015069138915283577", "2.584757961455159e-07", "1.0339031845820635e-07", "1.0339031845820635e-07", "1.6180584838709295e-05", "5.169515922910318e-08", "0.0002344375471039829", "5.53138203751404e-06", "8.994957705863953e-06", "1.0339031845820635e-07", "1.1372935030402698e-06", "4.807649808306595e-06", "3.6186611460372224e-07", "0.002311187178814745", "0.006028689469298012", "0.0006636107590239974", "9.822080253529604e-07", "2.879420369061047e-05", "0.00023030193436565465", "1.499159617643992e-06", "1.0339031845820635e-07", "3.566965986808119e-06"), "values"-> Seq("AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BUMM", "BW", "BY", "BZ", "CA", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CSHH", "CSXX", "CU", "CV", "CY", "CZ", "DDDE", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GT", "GU", "GW", "GY", "HK", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NC", "NE", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM", "SN", "SO", "SR", "ST", "SUHH", "SV", "SY", "SZ", "TD", "TG", "TH", "TJ", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "US", "UY", "UZ", "VA", "VC", "VDVN", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "XAS", "XAU", "XEU", "XKO", "XKV", "XNA", "XPI", "XSA", "XSI", "XWG", "XWW", "XYU", "YE", "YUCS", "ZA", "ZM", "ZRCD", "ZW")),
    "types"-> Map("selectivity"-> Seq("0.0031792005974306163", "0.0010479125727331504", "0.0006938007320137937", "0.026857806416206723", "0.020972932879884075", "0.0008409251551798213", "0.0008189547125074526", "0.0022419156654477465"), "values"-> Seq("alternative", "dvd", "festival", "imdbDisplay", "original", "tv", "video", "working")),
    "isOriginalTitle"-> Map("selectivity"-> Seq("0.97", "0.03"), "values"-> Seq("0.0", "1.0")))


  override val groupFields: Map[String, String] = Map("region"-> "244", "types"-> "15", "isOriginalTitle"-> "2")

  override def dataSourceCode(outVarName: String): String = buildDataSourceCode(typeSchema, tableName + ".csv", outVarName, delimiter = ";")

  def filterCode(inVarName: String, outVarName: String, fieldSeed: Int = 0, valueSeed: Int = 0): (String, Double) = {
    val field = filterFields(fieldSeed % filterFields.size)

    var filterField = ""
    var filterValue = ""
    var filterOp = ""

    field match {
      case "region" =>
        filterField = fields(field)
        filterValue = s""" "${getElementBySeed(filterFieldValue(field)("values"), valueSeed).toString}" """
        filterOp = "=="

      case "types" =>
        filterField = fields(field)
        filterValue = s""" "${getElementBySeed(filterFieldValue(field)("values"), valueSeed).toString}" """
        filterOp = "=="

      case "isOriginalTitle" =>
        filterField = fields(field)
        filterValue = s""" "${getElementBySeed(filterFieldValue(field)("values"), valueSeed).toString}" """
        filterOp = "=="

      case _ => throw new Exception(s"Can not find field with name '$field' in filter operator generation.")
    }

    (
      buildFilterCode(inVarName, outVarName, filterField, filterValue, filterOp),
      getElementBySeed(filterFieldValue(field)("selectivity"), valueSeed).toString.toDouble
    )

  }
}
